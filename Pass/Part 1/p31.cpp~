#define DEBUG_TYPE "p31"
#include "llvm/ADT/Statistic.h"
#include "llvm/IR/Function.h"
#include "llvm/IR/Module.h"
#include "llvm/Pass.h"
#include "llvm/IR/Dominators.h"
#include "llvm/Support/raw_ostream.h"
#include "llvm/Analysis/LoopInfo.h"

using namespace llvm;

namespace {

	//Structure to hold stats about module
	struct moduleStats{
		int loopsTotal;
		int outLoopsTotal;
		int exitsTotal;

		//Initialize
		moduleStats(){
			loopsTotal = 0;
			outLoopsTotal = 0;
			exitsTotal = 0;
		}

		//Print all information
		void print(){
			errs() << "Total Loops:" << loopsTotal << '\n' ;
			//errs() << "Outermost Loops:" << outLoopsTotal << '\n' ;
			//errs() << "Exit CFG:" << exitsTotal << '\n' ;
		}

		~moduleStats(){
			print();
		}
	};
	
	struct p31 : public FunctionPass {
		// Pass identification, replacement for typeid
		static char ID; 
		p31() : FunctionPass(ID) {}

		//Initialize moduleStats
		moduleStats fullStats;

		//Run for each function
		virtual bool runOnFunction(Function &F){
			
			//Get loopinfo
  			LoopInfo &LI = getAnalysis<LoopInfo>();

			/////////////////////////////////DO BASIC BLOCK STUFF/////////////////////////////////////////////////
			//Get list of basic blocks			
			Function::BasicBlockListType &allblocks = F.getBasicBlockList();
			//Go through basic blocks
			for (Function::iterator newBlock = allblocks.begin(); newBlock != allblocks.end(); newBlock++) {

				//Check for if basic block is loop header
				if(LI.isLoopHeader(newBlock)==true){
					fullStats.loopsTotal++;		//then new loop
					//if it is, check depth is one
					/*if(LI.getLoopDepth(newBlock)==1){					
						fullStats.outLoopsTotal++;		//then outer loop
					}	*/			
				}
/*
				//Check for CFG
				if (LI.getLoopDepth(newBlock)!=0){			//if in a loop
					Loop* leave = LI.getLoopFor(newBlock);		//get the loop
					//Go through all successors					
					for (int i = 0; i< (newBlock->getTerminator())->getNumSuccessors();i++){
 						BasicBlock* successorBlock = (newBlock->getTerminator())->getSuccessor(i);
						Loop* enter = LI.getLoopFor(successorBlock);
						//if loop left is diff then enter, and enter is not a nested loop, increment exit
						if (enter!=leave && (LI.getLoopDepth(newBlock)>=LI.getLoopDepth(successorBlock))){
							fullStats.exitsTotal++;
						}					
					}
				}*/

			}

			
			return false; 
		}

		virtual void getAnalysisUsage(AnalysisUsage &AU) const {
		  AU.addRequired<LoopInfo>();
		}

	};
}

char p31::ID = 0;
static RegisterPass<p31> X("p31", "Part 3.1", true, true);

